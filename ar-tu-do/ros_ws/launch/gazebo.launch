<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <arg name="world" default="racetrack_decorated_2"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="true"/>
    <arg name="use_gpu" default="true"/>
    <arg name="joystick_type" default="xbox360"/>
    <arg name="visualize_lidar" default="false"/>
    <arg name="emergency_stop" default="true"/>
    <arg name="record" default="false"/>
    <arg name="videohd" default="false"/>
    <!-- added-->
    <arg name="map" default="$(find navigation_stack_config)/maps/recording.bag.yaml"/>

    <!-- Mode Override
        1 forces manual driving
        2 forces autonomous driving
        0 uses user input to enable the modes
    -->
    <arg name="mode_override" default="0"/>

    <param name="world_name" value="$(arg world)"/>

    <!-- Include racer with 720p camera -->
    <group if="$(arg videohd)">
        <include file="$(find racer_world)/launch/racer_gazebo_720.launch">
            <arg name="world" value="$(arg world)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
            <arg name="gui" value="$(arg gui)"/>
            <arg name="debug" value="$(arg debug)"/>
            <arg name="verbose" value="$(arg verbose)"/>
            <arg name="use_gpu" value="$(arg use_gpu)"/>
            <arg name="visualize_lidar" value="$(arg visualize_lidar)"/>
        </include>
    </group>

    <!-- Include racer with VGA camera -->
    <group unless="$(arg videohd)">
        <include file="$(find racer_world)/launch/racer_gazebo.launch">
            <arg name="world" value="$(arg world)"/>
            <arg name="paused" value="$(arg paused)"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
            <arg name="gui" value="$(arg gui)"/>
            <arg name="debug" value="$(arg debug)"/>
            <arg name="verbose" value="$(arg verbose)"/>
            <arg name="use_gpu" value="$(arg use_gpu)"/>
            <arg name="visualize_lidar" value="$(arg visualize_lidar)"/>
        </include>
    </group>
    

    <include file="$(find car_tf)/launch/car_transformer.launch">
        <arg name="topic_input" value="/scan_camera" />
        <arg name="topic_output" value="/scan/cam/cartesian" />
    </include>

    <include file="$(find cam_lidar_fusion)/launch/cam_lidar_fusion.launch">
        <arg name="topic_input_cam" value="/scan/cam/cartesian"/>
        <arg name="topic_input_lidar" value="/scan/lidar/cartesian"/>
        <arg name="topic_output_fused" value="/scan/fusion/cartesian"/>
    </include>
    
    <include file="$(find boxing)/launch/boxing.launch">
        <arg name="topic_input_cloud" value="/scan/fusion/cartesian" />
        <arg name="topic_input_colored_cloud" value="/racer/camera1/depth/points" />
        <arg name="topic_voxels" value="/scan/voxels" />
    </include>

    <include file="$(find voxel_classifier)/launch/voxel_classifier.launch">
        <arg name="topic_input_voxels" value="/scan/voxels" />
        <arg name="topic_output_clusters" value="/scan/clusters" />
    </include>


    <node name="lap_timer" pkg="simulation_tools" type="lap_timer.py" output="screen"/>
    <node pkg="gazebo_telemetry" type="gazebo_state_telemetry.py" name="gazebo_state_telemetry" respawn="true" output="screen"/>
    
    <!-- wallfollowing start - please enable only one -->
    <!-- current implementation  
    <include file="$(find wallfollowing5)/launch/autonomous_driving.launch"/>

    -->

  

    <include file="$(find wall_detection)/launch/wall_detection.launch">
        <arg name="topic_input_clusters" value="/scan/clusters" />
        <arg name="topic_output_walls" value="/obstacles/walls" />
        <arg name="topic_output_obstacles" value="/obstacles/obstacles" />
    </include>
    
    <group if="$(arg emergency_stop)">
        <include file="$(find emergency_stop)/launch/emergency_stop.launch"/>
    </group>

    <include file="$(find vesc_sim)/launch/vesc_sim.launch"/>
    <include file="$(find car_control)/launch/car_control.launch">
        <arg name="mode_override" value="$(arg mode_override)"/>
    </include>
    <include file="$(find teleoperation)/launch/remote_control.launch">
        <arg name="joystick_type" value="$(arg joystick_type)"/>
    </include>

    <include file="$(find imu_velocity)/launch/car_imu_velocity.launch" />

    <node pkg="simulation_tools" type="crash_detector" name="crash_detector" output="screen">
    </node>
    <node pkg="tf" type="static_transform_publisher" name="depth_rotation" args="0.18 0 0.14 -1.570796327 0 -1.570796327 /base_link /camera 10" />

    <!-- publishes the approximated maximal possible speed for a certain position on the track -->
    <node pkg="simulation_tools" type="speed_info" name="speed_info" respawn="true" output="screen"/>
    
    <!-- needed for logging telemetry data and provide node for rviz -->
    <!-- arguments -->
    <!-- 1: log prefix (string), default: none -->
    <!-- 2: length for min/max arrays (int), default: 100 -->
    <!-- 3: smoothing value of acceleration (int), default: 5 -->
    <!-- 4: whether its simulation or not (string: yes|no), default: no -->
    <!-- 5: whether write statistics or not (string: yes|no), default: no -->
    <node pkg="simulation_tools" type="log_stats.py" name="log_stats" respawn="true" output="screen" args="gazebo 100 10 yes yes"/>
    
    <group if="$(arg record)">
        <node pkg="image_view" type="video_recorder" name="video_record_cam">
            <remap from="image" to="/racer/camera1/image_raw"/>
            <param name="fps" value="30" />
            <param name="filename" value="output-cam.avi" />
        </node>        
    </group>
    
    <!-- default rviz config -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find racer_world)/launch/rviz_config.rviz"/>
    

    <include file="$(find navigation_stack_config)/launch/move_base.launch">
	<arg name="map" value="$(arg map)"/>
    </include>

    <include file="$(find navigation_stack_control_converter)/launch/navigation_stack_control_converter.launch"/>

</launch>
